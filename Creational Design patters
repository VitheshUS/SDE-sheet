> Singleton design pattern:

The class must have a private constructor so that we cant create the instances externally 
The class must be final so that it cannot be inherited
It must have a private static variable
It must have a static factory method
It must handle async calls

We can use double checking for synchronization

public class LazySingleton {
    private static volatile LazySingleton instance;

    private LazySingleton() {}

    public static LazySingleton getInstance() {
        if (instance == null) { // First check (no locking)
            synchronized (LazySingleton.class) { // Locking on class object
                if (instance == null) { // Second check (inside lock)
                    instance = new LazySingleton();
                }
            }
        }
        return instance;
    }
}

// Here LaztSingleton.class is a special object that tells us to apply synchronization throught that class object. So if one thread enters the sunc block then the rest thread cant enter that block even if they are in different instance
// If we give a particular instance then the locking only happens within that object.

>BILL PUGH Singleton: (Handle synchronization effeciently): IMPORTANT !!

Before diving into the this lets learn about the inner class
When jvm start compiling it start creating the special objects for all the classes. The special object is not an instance of that object but it contains the metadata of the object which is used during the actual creation of the object
So all the static varaibles are loaded into the memory and the static block is also executed.
But the inner class is in the form of metadata and its not actually loaded into the memory. Therefore all the static varaible and static block inside the static inner class are not executed or loaded into the memory.
But as soon as the inner class is referenced the class are now loaded into the memory and static variable is loaded into the static memory.

For static inner class we can directly reference them without creating the instance of the outer class
For non static inner class we need instance of the outer class to refernce the inner class.

These are done by JVM

In Bill Pugh we are not relying on double checking and synchronized block but we will rely on JVM's powerfull class loading synchronization

public class BillPughSingleton {
    private BillPughSingleton() { }

    private static class SingletonHelper {
        private static final BillPughSingleton INSTANCE = new BillPughSingleton();
    }

    public static BillPughSingleton getInstance() {
        return SingletonHelper.INSTANCE;  // Class loads only when first accessed
    }
}

As we know the inner class are not loaded into the memory until they are refenced.
In the above example as soon as the inner class is loaded into the memory the instance is created and that instance is shared through out.
But initialy they are not loaded right.

So here, 2 thread tries to access the inner class instance. But the instance is not loaded in the memory. Hence JVM will choose any one thread from the 2 thread and lets it to load the class into the memory while the other thread waits.
Basically here when the class is loaded the instance is created. After the instance is created thread 1 take that and continue and continue its exection. In the same way thread 2 also resumes the execution but the instance is loaded in the memory right.
Hence it take the instance that is in the memory and continues its execution.

ðŸ”¹ How JVM Handles Multiple Threads
Step	Action
T1 & T2 call getInstance() at the same time -> 	Instance is not created yet
JVM chooses one thread (T1 or T2) ->	That thread loads SingletonHelper class
JVM locks SingletonHelper ->	Ensures no other thread can load it at the same time
INSTANCE is created	Stored in memory
Other thread (T2) resumes ->	Finds INSTANCE already created, just returns it
Future calls (T3, T4, etc.) ->	Directly get the instance (super fast, no waiting!)

ðŸ”¹ Final Takeaway
ðŸ’¡ Instead of writing manual synchronization, we are letting JVM handle it for us!
ðŸ’¡ This makes the Bill Pugh Singleton the most efficient way to implement a Singleton in Java.

ðŸ”¥ Smart design â†’ Best performance â†’ 100% thread safety! ðŸ”¥


***********************************************************************************************************************************************************


FACTORY METHOD:
So basically we are abstracting the object creation from the one that uses it.
Lets consider the code that uses that object as client and the object as product.
The client wants to perform some operation and he knows what to call. But he dosent care about how that operation is performed and who does that.
Lets consider a logistics application where we have to transport an order. But the location can be nearby or offshore. So the transportation can be a ship or a truck or even a plane.
Now all these are different transportion but they all deliver right. So client is only worried about delivery.
Now the client will call the factory method to give a proper instance that does the job. the client will get the instance and will call the deliver method in that instance.

Now inorder to achive this we need abstract class or an interface.
Because the interface will have this method.
The rest of the class will implement this interface.
So we can use this interface as a reference type.

We have an interface ITransport

// Online Java Compiler
// Use this editor to write, compile and run your Java code online

class Main {
    public static void main(String[] args) {
        Main obj=new Main();
        String destination="Offshore";
        
        ITransport transport=obj.getTransport(destination);
        if(transport !=null)
        transport.deliver();
         

    }
    public ITransport getTransport(String destination){
         switch(destination){
             case "Offshore":
                 return new Ship();
             case "NearBy":
                 return new Truck();
             default:return null;
         }
    }
}

interface ITransport{
    public void deliver();
}

class Ship implements ITransport{
    public void deliver(){
        System.out.println("Delivered by ship");
    }
}

class Truck implements ITransport{
    public void deliver(){
        System.out.println("Delivered by Truck");
    }
}

We are only worried about delivering here. Who and how is none of our concern.

Now for the object pooling.
If the object creation is very expensive then we need to follow object polling.
We will have a onbject pool instance and that instance will have a datastructure that will help us store the objects.
Here lets say that the datastructure is Queue. When ever we want an object we will first have a singleton instacnce of this object pool.
This single instance will also have a factory method.
Now when we want some instance from this factory method . that method will first check if the instance is already there in queue. if its already there then we just poll that and return it.
After the object is used by the client the client must release the instance by calling the release method of the object pool and passing the instance.
Now the object will be stored back in the queue.


**********************************************************************************************************************************************************************

ABSTRACT FACTORY:
So basically this uses a factory method but now we have multiple factory that uses factory methods.
If we are dealing with multiple related objects then we use abstract factory.

There is a product called chairs,table so we have a factory method that creates these products.
But there is also a chance that the styles of these are different. some  may be made of wood or some ay be made of legos. But they all basic common property.
In this case we need different factories to create the instance of the objects.
So based on the requiredment we need different factory. And these factory will have factory methods that create the required intances.

************************************************************************************************************************************************************************

BUILDER:

So bascially if there is an instance , we are seperating the property construction from the actual intance.
For example if we have a house class. Then it will have different properties like walls, floors, pools, garden, and many more.
But every house dosent require all these property.
So when we are creating an house instance , We have to pass paremeters to the constructor. But doing this is very messy because we either have to create many constructors 
or pass null values to the constructor.

For example saying :
I want to build a house with 4 walls and a floor and 1 door
I want to build a house with 4 walls and floor and 1 door and no swimming pool and no gardern and .....

Which is the better way to say things? obviously the first one right.

So lets keep the property in the class but no need of passing them throught the constructors.
Instead we will have a seperate builder object which will have
buildWalls();
buildFloor();
buildGarden();
buildPool(); ... and much more

But different builders can have their own style of building things.
Like the one who builds everything with wood, One who builds with stones and one with cement

They all build things but in a different way.
So we can have different builders but they are independent from each other. only one builder can work on an house at a time.
They all have same property but so those things in a different way.

There is also a director that can be used.
What we usually do is the client themselves can call all the build methods in the builder and build the house.
But if client thinks that doing all those work by himself is such a draaaag. then he can use a director object.
Now the director is responsible to build the house in a correct manner.

Now client just have to call one method in the director and give the builder to that director.
Now everything will be handled by the director. 
Then again the director is not compulsory.

// Product Class
class Car {
  constructor(
    public brand: string,
    public color: string,
    public engine: string,
    public seats: number
  ) {}

  showDetails() {
    console.log(`Car: ${this.brand}, Color: ${this.color}, Engine: ${this.engine}, Seats: ${this.seats}`);
  }
}

// Builder Class
class CarBuilder {
  private brand!: string;
  private color!: string;
  private engine!: string;
  private seats!: number;

  setBrand(brand: string): this {
    this.brand = brand;
    return this;
  }

  setColor(color: string): this {
    this.color = color;
    return this;
  }

  setEngine(engine: string): this {
    this.engine = engine;
    return this;
  }

  setSeats(seats: number): this {
    this.seats = seats;
    return this;
  }

  build(): Car {
    return new Car(this.brand, this.color, this.engine, this.seats);
  }
}

// Using the Builder
const car1 = new CarBuilder()
  .setBrand("Tesla")
  .setColor("Red")
  .setEngine("Electric")
  .setSeats(5)
  .build();

const car2 = new CarBuilder()
  .setBrand("BMW")
  .setColor("Black")
  .setEngine("V8")
  .setSeats(2)
  .build();

car1.showDetails();  // Car: Tesla, Color: Red, Engine: Electric, Seats: 5
car2.showDetails();  // Car: BMW, Color: Black, Engine: V8, Seats: 2

****************************************************************************************************************************************************************

PROTOTYPE:
Prototype design pattern is all about the cloning of objects.
Lets say we want a copy of an object. But copying it manually would be insane because an object can hava recursive composite objects and they all can have private properties.
We can not access the private properties directly. So copying few objects may become almost impossible.
So what we can do is assign the creation of a copy to that object itself.
Now we can copy even the private properties.

All we have to do is call the copy function in an object and that object is gonna create a deep copy of that object and return it.
This is called prototype.
