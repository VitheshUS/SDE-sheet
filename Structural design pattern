ADAPTER:
Adapter lets 2 objects with incompatible interface to colaborate with each other.
Lets say we have a stock market data provider that provides data in XML format.
And we have a stock market analyser that takes input in JSON format and displays visualization
But these interface are incompatible right. 
Here the adaptor comes to picture. Adaptor will make the communication possible.

So lets consider we have to interfaces.

Lets say we have round hole and we now need a round peg to cover it. Here we can determine if a peg can fit in or not just by checking the radius right.
But instead of a round peg we now have a square peg. technically we can cover the round hole with a square peg as well right. But how do we determine this.
So in this case we need an adaptor for this.
This adaptor is wrapped around a square peg.

The round hole was initially taking the round peg as a parameter and was determining if it can fit or not. But can accept a square peg and anyway we cant even determin the radius of the square right.
Because the square contains the width not radius. But we can extract the circle from the square .it may not be absolute circle but we can still use it for covering the hole right.
The square will fit a circle in it and we can determin this by extracting a acircle from it.
But its not the job of round hole to extract this right.Round hole will get the instacnce and it will get the radius and will check it.

So what we can do is anyway the round hole accepts roundPeg as a parameter right. We can now create an instance that implements the roundhole interface. What about the radius?
We will have that parameter right.
So what we can do is implement roundPeg and wrap squarePeg.
So this adapter will get the squarepeg and it will then determin the radius. This adapter can passed as the pareamenter to roundhole because is implements roundPeg right.

Check out the exmple here:-
https://refactoring.guru/design-patterns/adapter/java/example


So The client wont know about what the adadpter is actually using.
The client wants an object A and it will the methods of that instance. But what we can do is we can create an adapter that extends the interface of
object A. Now if we pass the instance of the adapter to the client it will still work because it extends the instance which the client is 
expecting. Now the client will call the methods in the adapter. But this adapter is not actually working on Object A. Its actually has 
a composite object B instance and the method is actually returing the data based on the object B.

So for exampl if we have a car instance . the car calls move forward, left ,right ans so on. The car expects the object of type wheels.
But if we use an adapter which extends wheels and has all the method implemented and give that to the car. The car will have no problem becuase
its simply sending the signals to wheels right. It just wants its job to be done. No for the adapter it may not be using the wheels. It 
only extends wheels but internally it may be using rocket bosters and wings. So when the car sends signal to move forward the adater may actually move forward
but using rocket bosters and wings.

****************************************************************************************************************************************

BRIDGE:
Bridge is nothing but encapsulating the business logic.
Its very similar to open close principles.
Its like a payament applicatin and payement methods where the applicaiton will have a composite property called payment method and it will have ans instance of the payement method.

Lets have an example, 
https://refactoring.guru/design-patterns/bridge/java/example

its completly explained here.
Dont write the concrete implementation in the main class itself.
Instead seperate the business logic from it.

*****************************************************************************************************************************************
