ADAPTER:
Adapter lets 2 objects with incompatible interface to colaborate with each other.
Lets say we have a stock market data provider that provides data in XML format.
And we have a stock market analyser that takes input in JSON format and displays visualization
But these interface are incompatible right. 
Here the adaptor comes to picture. Adaptor will make the communication possible.

So lets consider we have to interfaces.

Lets say we have round hole and we now need a round peg to cover it. Here we can determine if a peg can fit in or not just by checking the radius right.
But instead of a round peg we now have a square peg. technically we can cover the round hole with a square peg as well right. But how do we determine this.
So in this case we need an adaptor for this.
This adaptor is wrapped around a square peg.

The round hole was initially taking the round peg as a parameter and was determining if it can fit or not. But can accept a square peg and anyway we cant even determin the radius of the square right.
Because the square contains the width not radius. But we can extract the circle from the square .it may not be absolute circle but we can still use it for covering the hole right.
The square will fit a circle in it and we can determin this by extracting a acircle from it.
But its not the job of round hole to extract this right.Round hole will get the instacnce and it will get the radius and will check it.

So what we can do is anyway the round hole accepts roundPeg as a parameter right. We can now create an instance that implements the roundhole interface. What about the radius?
We will have that parameter right.
So what we can do is implement roundPeg and wrap squarePeg.
So this adapter will get the squarepeg and it will then determin the radius. This adapter can passed as the pareamenter to roundhole because is implements roundPeg right.

Check out the exmple here:-
https://refactoring.guru/design-patterns/adapter/java/example


So The client wont know about what the adadpter is actually using.
The client wants an object A and it will the methods of that instance. But what we can do is we can create an adapter that extends the interface of
object A. Now if we pass the instance of the adapter to the client it will still work because it extends the instance which the client is 
expecting. Now the client will call the methods in the adapter. But this adapter is not actually working on Object A. Its actually has 
a composite object B instance and the method is actually returing the data based on the object B.

So for exampl if we have a car instance . the car calls move forward, left ,right ans so on. The car expects the object of type wheels.
But if we use an adapter which extends wheels and has all the method implemented and give that to the car. The car will have no problem becuase
its simply sending the signals to wheels right. It just wants its job to be done. No for the adapter it may not be using the wheels. It 
only extends wheels but internally it may be using rocket bosters and wings. So when the car sends signal to move forward the adater may actually move forward
but using rocket bosters and wings.

****************************************************************************************************************************************

BRIDGE:
Bridge is nothing but encapsulating the business logic.
Its very similar to open close principles.
Its like a payament applicatin and payement methods where the applicaiton will have a composite property called payment method and it will have ans instance of the payement method.

Lets have an example, 
https://refactoring.guru/design-patterns/bridge/java/example

its completly explained here.
Dont write the concrete implementation in the main class itself.
Instead seperate the business logic from it.

*****************************************************************************************************************************************

COMPOSITE:

We can technically composite is a tree.
The parent having many children objects and those children further has children objects.
If some value of parent depends on the children and in the same way for children as well . Then we normally do a recursion and backtracking right.
In the same way the parent will ask the children regarding that value. The class must have a method implemented that calculates this.
And it that class has furhter children then that instance must ask that children as well.

Eg:
https://refactoring.guru/design-patterns/composite/java/example

*****************************************************************************************************************************************

DECORATOR:
Decorator can be considered as wraping and chaining.
For example 

Data -> Compress Data ->Encrypt Data -> Store Data

Stored Data -> Decrypt -> Decompress -> Data

Here we use decorators to perform a chaining of wraping.

Example:- 
  https://refactoring.guru/design-patterns/decorator/java/example

This follows the principle of aggregation and interface and inheritance.
Mainly- INTERFACE BASED POLYMORPHISM plays a strong role in this.

public class Main
{
	public static void main(String[] args) {
		DataSource dataSource=
		new CompressDataSource(
		    new EncryptDataSource(
		        new FileDataSource("Vithesh.txt"));
		    )
		);
	}
}

class DataSource{
    public String read();
    public String write(String data);
}

class FileDataSource implements DataSource{
    String name;
    StringBuilder sb;
    public FileDataSource(String name){
        this.name=name;
        sb=new String StringBuilder();
    }
    public String read(){
        return sb.toString();
    }
    public void write(String data){
        sb.append(data);
    }
}

class DataSourceDecorator implements DataSource{
    private DataSource wrappee;
    public DataSourceDecorator(DataSource dataSource){
        this.wrappee=dataSource;
    }
    public String read(){
        return wrappee.read();
    }
    public void write(String data){
        wrappee.write(data);
    }
}

class CompressDataSource extends DataSourceDecorator{
    public CompressDataSource(DataSource dataSource){
        super(dataSource);
    }
    public String read(){
        String compressedData = super.read();
        
        String decompressedData=compressedData;
        
        return decompressedData;
    }
    public void write(String data){
        String compressedData=data;
        super.write(compressedData);
    }
}

class EncryptDataSource extends DataSourceDecorator{
    public EncryptDataSource(DataSource dataSource){
        super(dataSource);
    }
    public String read(){
        String encryptedData = super.read();
        
        String decryptedData=encryptedData;
        
        return decryptedData;
    }
    public void write(String data){
        String encryptedData=data;
        super.write(encryptedData);
    }
}

If we are not following this there are other ways to achive wraping and chaining.
One is following inheritence
Other is simply creating an object that will perform the chaining for us.
But both are very naive because inheritence can be modified in runtime and its tight coupling.
Even using a different object to perform this is also very complex and may seem unnecessary.

*************************************************************************************************************************************

FACADE:

Facade is a layer of abstraction which makes our life a lot easier.
Imagine we have an interface that performs a complex operation.
So for example if we are converting a video to some resolution there are multiple operation that we must do .
We must change resolution, aspect ratio, video format ,codec (compress or decompress the video to save space), bitrate
But i dont want to these because i dont even know what these are.
I just want to change the resolution.
So the developer will change our lives by creating an faced for this.
Means an interface which contains method that is easy to use by the client.
This interface will be implemented and will all the different stages of work to change the resolution.

So this is called Facade design pattern.

Eg:
https://refactoring.guru/design-patterns/facade/java/example

***************************************************************************************************************************************

FLYWEIGHT:
If an object contains shared and immutable properties then those properties are called as intrinsic property.
The property that are specfic for an object and are mutable then they are extrinsic property.

So when we are creating a game there are many objects that we must create right.
So out of those objects there will be many objects that share common proprties and that may persist its state throught out the process lifecycle.
For examole trees in games.
So lets say we have to create more that 1000 trees in an area in that game.
But all those objects share same property but the only difference is its coordinates.

So what we can do is create an object for this shares property.
and keep it as a composite object in trees.

This will greatly reduce the RAM usage.
public class Main
{
	public static void main(String[] args) {
		TreeFactory treeFactory=new TreeFactory();
		
		//Now we can create any type of tree any number of times
	}
}

class TreeFactory{
    Map<String,TreeType>treeMap=new HashMap<>();
    
    public Tree createTree(int x,int y,String name,String color,String texture){
        String key=name+"-"+color+"-"+texture;
        
        if(!treeMap.containsKey(key)){
            TreeType newTreeType=new TreeType(name,color,texture);
            treeMap.put(key,newTreeType);
        }
        
        return new Tree(x,y,newTreeType);
    }
}

class TreeType{
    String name;
    String color;
    String texture;
    public TreeType(String name,color,texture){
        this.name=name;
        this.color=color;
        this.texture=texture;
    }
}

class Tree{
    int x,y;
    TreeType treeType;
    public Tree(int x,int y,TreeType treeType){
        this.x=x;
        this.y=y;
        this.treeType=treeType;
    }
}

eg:https://refactoring.guru/design-patterns/flyweight/java/example

**********************************************************************************************************************************


PROXY:
Proxy is an object between the client and the real object.
The client will send the request to the proxy thing that its the real object. Because of the proxy object also implements the interface
that is implementd by the real object.
So after the client passes the request to the proxy. The proxy process the request and does some work and it then passes the request to the
real object.
SO basically the proxy acts as a real object.
The client send the request to the proxy thinking that it is the real object.
The proxy will perform some operation and then send the request to the real object.

Best example for proxy is Lazy loading.
Like load the actual object only when it is accessed.

Lets see an example

public class Main
{
	public static void main(String[] args) {
		IImage image=ProxyImage("fileName");
		//The image is not loaded into the memory yet.
		
		image.displayImage(); //Now it gets displayed
	}
}

class IImage{
    void displayImage();
}

class RealImage implements IImage{
    String fileName;
    String IFile;
    RealImage(String fileName){
        this.fileName=fileName;
        LoadFromDisk();
    }
    void displayImage(){
        System.out.println("RealImage");
    }
}

class ProxyImage implements IImage{
    RealImage realImage;
    String fileName;
    ProxyImage(String fileName){
        this.fileName=fileName;
    }
    void displayImage(){
        if(realImage == null){
            realImage=new RealImage(fileName);
        }
        realImage.displayImage();
    }
}

*****************************************************************************************************************************************
